{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","components/UnlockButton.tsx","views/Home/hooks/useFarmsWithBalance.tsx","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CardBusdValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","views/Home/components/EarnAPRCard.tsx","views/Home/components/EarnuptoPool.tsx","views/Home/index.tsx"],"names":["_createForOfIteratorHelper","o","allowArrayLike","it","Symbol","iterator","Array","isArray","unsupportedIterableToArray","length","i","F","s","n","done","value","e","_e","f","TypeError","err","normalCompletion","didErr","step","next","_e2","UnlockButton","props","t","useTranslation","useAuth","login","logout","onPresentConnectModal","useWalletModal","onClick","useFarmsWithBalance","useState","farmsWithStakedBalance","setFarmsWithStakedBalance","earningsSum","setEarningsSum","account","useWeb3React","fastRefresh","useRefresh","useEffect","a","calls","farmsConfig","map","farm","address","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","index","balance","BigNumber","farmsWithBalances","filter","balanceType","gt","totalEarned","reduce","accum","earning","earningNumber","eq","div","DEFAULT_TOKEN_DECIMAL","toNumber","fetchBalances","useAllEarnings","balances","setBalance","res","fetchAllBalances","CardValue","decimals","fontSize","lineHeight","prefix","bold","color","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","style","CardBusdValue","Block","styled","CakeHarvestBalance","pow","cakePriceBusd","usePriceCakeBusd","earningsBusd","multipliedBy","CakeWalletBalance","cakeBalance","useTokenBalance","getCakeAddress","cakeUserBalance","getBalanceNumber","busdBalance","times","StyledFarmStakingCard","Card","CardImage","img","Label","Actions","FarmedStakingCard","pendingTx","setPendingTx","useToast","toastSuccess","toastError","numFarmsToCollect","masterChefContract","useMasterchef","harvestAllFarms","useCallback","farmWithBalance","harvestFarm","symbol","scale","mb","src","alt","width","height","mr","id","disabled","StyledCakeStats","PguText","Text","CakeStats","totalSupply","useTotalSupply","burnedBalance","useBurnedBalance","cakeSupply","chyPriceBusd","StyledTotalValueLockedCard","CustomCardBody","CardBody","Row","TotalValueLockedCard","tvl","useTotalValue","fontWeight","toFixed","EarnuptoFarm","farms","useFarms","data","cakePrice","maxAPY","Number","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","toLocaleString","slice","farmsToDisplay","apy","isTokenOnly","totalLiquidity","lpTotalInQuoteToken","token","busdPrice","quoteToken","cakeRewardsApr","getFarmApr","poolWeight","lpAddresses","ChainId","MAINNET","penguPerBlock","href","textDecoration","animation","variant","EarnuptoPool","Hero","Flex","theme","mediaQueries","lg","Cards","BaseLayout","sm","CTACards","HomePage","Page","Home","as","FarmStakingCard","EarnAPRCard"],"mappings":"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","file":"static/js/8.46e14f94.chunk.js","sourcesContent":["import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import React from 'react'\r\nimport { Button, useWalletModal } from '@pancakeswap/uikit'\r\nimport useAuth from 'hooks/useAuth'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n\r\nconst UnlockButton = (props) => {\r\n  const {t} = useTranslation()\r\n  const { login, logout } = useAuth()\r\n  const { onPresentConnectModal } = useWalletModal(login, logout, t)\r\n\r\n  return (\r\n    <Button onClick={onPresentConnectModal} {...props}>\r\n      {t('Unlock Wallet')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default UnlockButton\r\n","import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from 'hooks/useRefresh'\r\nimport { DEFAULT_TOKEN_DECIMAL } from 'config'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithStakedBalance, setFarmsWithStakedBalance] = useState<FarmWithBalance[]>([])\r\n  const [earningsSum, setEarningsSum] = useState<number>(null)\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPengu',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n      const farmsWithBalances = results.filter((balanceType) => balanceType.balance.gt(0))\r\n      const totalEarned = farmsWithBalances.reduce((accum, earning) => {\r\n        const earningNumber = new BigNumber(earning.balance)\r\n        if (earningNumber.eq(0)) {\r\n          return accum\r\n        }\r\n        return accum + earningNumber.div(DEFAULT_TOKEN_DECIMAL).toNumber()\r\n      }, 0)\r\n\r\n      setFarmsWithStakedBalance(farmsWithBalances)\r\n      setEarningsSum(totalEarned)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return { farmsWithStakedBalance, earningsSum }\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport useRefresh from './useRefresh'\r\n\r\nconst useAllEarnings = () => {\r\n  const [balances, setBalance] = useState([])\r\n  const { account } = useWeb3React()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchAllBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendingPengu',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const res = await multicall(masterChefABI, calls)\r\n\r\n      setBalance(res)\r\n    }\r\n\r\n    if (account) {\r\n      fetchAllBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return balances\r\n}\r\n\r\nexport default useAllEarnings\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport { Text } from '@pancakeswap/uikit'\r\n\r\nexport interface CardValueProps {\r\n  value: number\r\n  decimals?: number\r\n  fontSize?: string\r\n  lineHeight?: string\r\n  prefix?: string\r\n  bold?: boolean\r\n  color?: string\r\n}\r\n\r\nconst CardValue: React.FC<CardValueProps> = ({\r\n  value,\r\n  decimals,\r\n  fontSize = '40px',\r\n  lineHeight = '1',\r\n  prefix = '',\r\n  bold = true,\r\n  color = 'text',\r\n}) => {\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: value,\r\n    duration: 1,\r\n    separator: ',',\r\n    decimals:\r\n      // eslint-disable-next-line no-nested-ternary\r\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\r\n  })\r\n\r\n  const updateValue = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateValue.current(value)\r\n  }, [value, updateValue])\r\n\r\n  return (\r\n    <Text bold={bold} fontSize={fontSize} style={{ lineHeight }} color={color}>\r\n      {prefix}\r\n      {countUp}\r\n    </Text>\r\n  )\r\n}\r\n\r\nexport default CardValue\r\n","import React from 'react'\r\nimport CardValue, { CardValueProps } from './CardValue'\r\n\r\nconst CardBusdValue: React.FC<CardValueProps> = (props) => {\r\n  return (\r\n    <CardValue fontSize=\"14px\" lineHeight=\"1.1\" color=\"text\" prefix=\"~$\" bold={false} decimals={2} {...props} />\r\n  )\r\n}\r\n\r\nexport default CardBusdValue\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport BigNumber from 'bignumber.js'\r\nimport useAllEarnings from 'hooks/useAllEarnings'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 24px;\r\n`\r\n\r\nconst CakeHarvestBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const allEarnings = useAllEarnings()\r\n  const earningsSum = allEarnings.reduce((accum, earning) => {\r\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\r\n  }, 0)\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const earningsBusd = new BigNumber(earningsSum).multipliedBy(cakePriceBusd).toNumber()\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"text\" style={{ lineHeight: '76px', fontSize:\"36px\" }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Block>\r\n      <CardValue value={earningsSum} lineHeight=\"1.5\" fontSize=\"36px\" />\r\n      {!cakePriceBusd.eq(0) && <CardBusdValue value={earningsBusd} />}\r\n    </Block>\r\n  )\r\n}\r\n\r\nexport default CakeHarvestBalance\r\n","import React from 'react'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport useTokenBalance from 'hooks/useTokenBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { BigNumber } from 'bignumber.js'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport CardValue from './CardValue'\r\nimport CardBusdValue from './CardBusdValue'\r\n\r\nconst CakeWalletBalance = () => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const cakeBalance = useTokenBalance(getCakeAddress())\r\n  const cakeUserBalance = cakeBalance.balance ? getBalanceNumber(cakeBalance.balance) : 0\r\n  const cakePriceBusd = usePriceCakeBusd()\r\n  const busdBalance = cakePriceBusd.times(cakeUserBalance)\r\n\r\n  if (!account) {\r\n    return (\r\n      <Text color=\"text\" style={{ lineHeight: '54px', fontSize:\"36px\" }}>\r\n        {t('Locked')}\r\n      </Text>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CardValue value={cakeUserBalance} decimals={4} fontSize=\"24px\" lineHeight=\"36px\" />\r\n      {!cakePriceBusd.eq(0) ? <CardBusdValue value={busdBalance.toNumber()} /> : <br />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CakeWalletBalance\r\n","import React, { useState, useCallback } from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Card, CardBody, Button, Flex } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport UnlockButton from 'components/UnlockButton'\r\nimport { harvestFarm } from 'utils/calls'\r\nimport { useTokenBalance } from 'state/wallet/hooks'\r\nimport { getBalanceNumber } from 'utils/formatBalance'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport useToast from 'hooks/useToast'\r\nimport { useMasterchef } from 'hooks/useContract'\r\nimport { useThemeManager } from 'state/user/hooks'\r\nimport useFarmsWithBalance from '../hooks/useFarmsWithBalance'\r\nimport CakeHarvestBalance from './CakeHarvestBalance'\r\nimport CakeWalletBalance from './CakeWalletBalance'\r\n\r\nconst StyledFarmStakingCard = styled(Card)`\r\n    background-image: url(/images/cardbg.svg);\r\n    background-repeat: no-repeat;\r\n    min-height: 476px;\r\n    background-size: cover;\r\n`\r\n\r\nconst Block = styled.div`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\n\r\nconst Label = styled.div`\r\n  color: rgb(119, 119, 119);\r\n  font-size: 18px;\r\n`\r\n\r\nconst Actions = styled.div`\r\n  margin-top: 24px;\r\n`\r\n\r\nconst FarmedStakingCard = () => {\r\n  const [pendingTx, setPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const {t} = useTranslation()\r\n\r\n\r\n  const registerToken = async (tokenAddress: string, tokenSymbol: string, tokenDecimals: number) => {\r\n    const tokenAdded = await window.ethereum.request({\r\n      method: 'wallet_watchAsset',\r\n      params: {\r\n        type: 'ERC20',\r\n        options: {\r\n          address: tokenAddress,\r\n          symbol: tokenSymbol,\r\n          decimals: tokenDecimals,\r\n          image: `https://miamiswap.finance/images/token.png`,\r\n        },\r\n      },\r\n    })\r\n  \r\n    return tokenAdded\r\n  }\r\n\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { farmsWithStakedBalance, earningsSum: farmEarningsSum } = useFarmsWithBalance()\r\n  const numFarmsToCollect = farmsWithStakedBalance.filter((value) => value.pid !== 0).length\r\n  const masterChefContract = useMasterchef()\r\n  const harvestAllFarms = useCallback(async () => {\r\n    setPendingTx(true)\r\n    // eslint-disable-next-line no-restricted-syntax\r\n    for (const farmWithBalance of farmsWithStakedBalance) {\r\n      try {\r\n        // eslint-disable-next-line no-await-in-loop\r\n        await harvestFarm(masterChefContract, farmWithBalance.pid)\r\n        toastSuccess(\r\n          `${t('Harvested')}!`,\r\n          t('Your %symbol% earnings have been sent to your wallet!', { symbol: 'CAKE' }),\r\n        )\r\n      } catch (error) {\r\n        toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n      }\r\n    }\r\n    setPendingTx(false)\r\n  }, [farmsWithStakedBalance, masterChefContract, toastSuccess, toastError, t])\r\n\r\n  return (\r\n    <StyledFarmStakingCard>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\">\r\n          {t('Farms & Staking')}\r\n        </Heading>\r\n        <CardImage src=\"/images/new/pguToken.png\" alt=\"PGU logo\" width={64} height={64} />\r\n        <Block>\r\n          <Label >{t('PGU to Harvest')}:</Label>\r\n          <CakeHarvestBalance />\r\n        </Block>\r\n        <Block>\r\n          <Label>{t('PGU in Wallet')}:</Label>\r\n          <CakeWalletBalance />\r\n        </Block>\r\n        <Actions>\r\n          {account ? (\r\n            \r\n            <Button\r\n              mr=\"8px\"\r\n              id=\"harvest-all\"\r\n              disabled={numFarmsToCollect <= 0 || pendingTx}\r\n              onClick={harvestAllFarms}\r\n              \r\n            >\r\n              {pendingTx ? t('Collecting PGU') : t(`Harvest all (${numFarmsToCollect})`)}\r\n            </Button>\r\n         ) : (\r\n            <UnlockButton />\r\n          )}\r\n        </Actions>\r\n      </CardBody>\r\n    </StyledFarmStakingCard>\r\n  )\r\n}\r\n\r\nexport default FarmedStakingCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Heading, Text } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { getBalanceNumber, formatLocalisedCompactNumber } from 'utils/formatBalance'\r\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\r\nimport { usePriceCakeBusd } from 'state/farms/hooks'\r\nimport { getCakeAddress } from 'utils/addressHelpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CardValue from './CardValue'\r\n\r\nconst StyledCakeStats = styled(Card)`\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  background-image: url(/images/bg2.svg);\r\n    background-repeat: no-repeat;\r\n    background-position: right bottom;\r\n    min-height: 476px;\r\n    background-size: cover;\r\n`\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst CardImage = styled.img`\r\n  margin-bottom: 16px;\r\n`\r\nconst PguText = styled(Text)`\r\n    margin-bottom:16px;\r\n    `\r\nconst CakeStats = () => {\r\n  const { t } = useTranslation()\r\n  const totalSupply = useTotalSupply()\r\n  const burnedBalance = getBalanceNumber(useBurnedBalance(getCakeAddress()))\r\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - burnedBalance : 0\r\n  const chyPriceBusd = usePriceCakeBusd()\r\n  const mcap = chyPriceBusd.times(cakeSupply)\r\n  return (\r\n    <StyledCakeStats>\r\n      <CardBody>\r\n        <Heading scale=\"xl\" mb=\"24px\" >\r\n          {t('Pengu Stats')}\r\n        </Heading>\r\n        <CardImage src=\"/images/new/pguToken.png\" alt=\"PGU logo\" width={64} height={64} />\r\n         <CardValue  value={cakeSupply} />\r\n        <PguText  >{t('Total Token Supply')}</PguText>\r\n        <CardValue  decimals={0} value={burnedBalance}/>\r\n        <PguText  >{t('Total Pengu Burned')}</PguText>\r\n\r\n        <CardValue  decimals={6} value={chyPriceBusd.toNumber()} />\r\n        <PguText  >{t('Pengu Price')}</PguText>\r\n        {/* <Row>\r\n          <Text  fontSize=\"14px\">{t('Market Cap')}</Text>\r\n          <CardValue fontSize=\"14px\" decimals={6} value={mcap.toNumber()} />\r\n        </Row> */}\r\n      </CardBody>\r\n    </StyledCakeStats>\r\n  )\r\n}\r\n\r\nexport default CakeStats\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { useTotalValue } from 'state/farms/hooks'\r\n// import { useGetStats } from 'hooks/api'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nconst StyledTotalValueLockedCard = styled(Card)`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  \r\n`\r\n\r\nconst CustomCardBody = styled(CardBody)`\r\n  min-height:120px;\r\n`;\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst TotalValueLockedCard = () => {\r\n  const { t } = useTranslation()\r\n  const tvl = useTotalValue()\r\n  // const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\r\n\r\n  return (\r\n    <StyledTotalValueLockedCard>\r\n      <CustomCardBody>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Total Value Locked (TVL)')}\r\n        </Heading>\r\n        <Row>\r\n          {tvl ? (\r\n            <>\r\n              <Text fontSize=\"36px\" style={{color:'#4B45BE', fontWeight: 600}} >${tvl.toFixed(2)}</Text>\r\n              \r\n            </>\r\n          ) : (\r\n            <Skeleton height={66} />\r\n          )}\r\n        </Row>\r\n        <Row>\r\n        <Text color=\"textSubtle\">{t('Across all LPs')}</Text>\r\n        </Row>\r\n      </CustomCardBody>\r\n    </StyledTotalValueLockedCard>\r\n  )\r\n}\r\n\r\nexport default TotalValueLockedCard\r\n","import React, { useCallback, useRef } from 'react'\r\nimport { Card, CardBody, Heading, Text, Skeleton, Link, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\n\r\n\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst EarnuptoFarm = () => {\r\n  const { t } = useTranslation()\r\n  const { data: farms } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farms.filter((farm) => farm.multiplier !== '0X')\r\n    calculateAPY(activeFarms)\r\n    return (maxAPY.current).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      let apy = 0\r\n      farmsToDisplay.map((farm) => {\r\n        if(!farm.isTokenOnly){\r\n          const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          const { cakeRewardsApr } = getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.penguPerBlock))\r\n          apy = cakeRewardsApr\r\n        if (maxAPY.current < apy) maxAPY.current = apy\r\n      }\r\n      return apy\r\n    })\r\n  },\r\n    [ cakePrice],\r\n  )\r\n\r\n  return (\r\n    <Card>\r\n      <Link href=\"/#/farms\" style={{width: '100%', textDecoration:'none'}}>\r\n       <CardBody style={{width: '100%'}}>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Earn Up to')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"36px\" style={{color:'#4B45BE', fontWeight: 600}} >{getHighestAPY() ? (\r\n            `${getHighestAPY()}%`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}</Text>\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('APR in Farms')}</Text>\r\n          <ArrowForwardIcon />\r\n        </Row>\r\n      </CardBody>\r\n      </Link>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default EarnuptoFarm\r\n","import React, { useCallback, useRef } from 'react'\r\nimport { Card, CardBody, Heading, Text, Skeleton, Link, ArrowForwardIcon } from '@pancakeswap/uikit'\r\nimport { ChainId } from '@pancakeswap/sdk'\r\nimport BigNumber from 'bignumber.js/bignumber'\r\nimport styled from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getFarmApr } from 'utils/apr'\r\nimport { useFarms, usePriceCakeBusd } from 'state/farms/hooks'\r\n\r\nconst Row = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  font-size: 14px;\r\n  justify-content: space-between;\r\n  margin-bottom: 8px;\r\n`\r\n\r\nconst EarnuptoPool = () => {\r\n  const { t } = useTranslation()\r\n  const { data: farms } = useFarms()\r\n  const cakePrice = usePriceCakeBusd()\r\n  const maxAPY = useRef(Number.MIN_VALUE)\r\n\r\n  const getHighestAPY = () => {\r\n    const activeFarms = farms.filter((farm) => farm.multiplier !== '0X')\r\n    calculateAPY(activeFarms)\r\n    return (maxAPY.current).toLocaleString('en-US').slice(0, -1)\r\n  }\r\n\r\n  \r\n\r\n  const calculateAPY = useCallback(\r\n    (farmsToDisplay) => {\r\n      let apy = 0\r\n      farmsToDisplay.map((farm) => {\r\n        if(farm.isTokenOnly){\r\n          const totalLiquidity = farm.isTokenOnly ? new BigNumber(farm.lpTotalInQuoteToken).times(farm.token.busdPrice) : new BigNumber(farm.lpTotalInQuoteToken).times(farm.quoteToken.busdPrice)\r\n          const { cakeRewardsApr } = getFarmApr(new BigNumber(farm.poolWeight), cakePrice, totalLiquidity, farm.lpAddresses[ChainId.MAINNET], new BigNumber(farm.penguPerBlock))\r\n          apy = cakeRewardsApr\r\n        if (maxAPY.current < apy) maxAPY.current = apy\r\n      }\r\n      return apy\r\n    })\r\n  },\r\n    [ cakePrice],\r\n  )\r\n\r\n  return (\r\n    <Card>\r\n      <Link href=\"/#/pools\" style={{width: '100%', textDecoration:'none'}}>\r\n       <CardBody style={{width: '100%'}}>\r\n        <Heading scale=\"lg\" mb=\"24px\">\r\n          {t('Earn Up to')}\r\n        </Heading>\r\n        <Row>\r\n          <Text fontSize=\"36px\" style={{color:'#4B45BE', fontWeight: 600}} >{getHighestAPY() ? (\r\n            `${getHighestAPY()}%`\r\n          ) : (\r\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\r\n          )}</Text>\r\n        </Row>\r\n        <Row>\r\n          <Text fontSize=\"14px\">{t('APR in Pools')}</Text>\r\n          <ArrowForwardIcon />\r\n        </Row>\r\n      </CardBody>\r\n      </Link>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default EarnuptoPool","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Heading, Text, BaseLayout, Flex, Image } from '@pancakeswap/uikit'\r\n\r\nimport Page from 'components/Layout/Page'\r\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\r\n// import LotteryCard from 'views/Home/components/LotteryCard'\r\nimport CakeStats from 'views/Home/components/CakeStats'\r\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\r\nimport EarnAPRCard from 'views/Home/components/EarnAPRCard'\r\nimport TwitterCard from 'views/Home/components/TwitterCard'\r\nimport WinCard from 'views/Home/components/WinCard'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport StakingPairCard from './components/StakingPairCard'\r\nimport EarnuptoPool from './components/EarnuptoPool'\r\n\r\nconst Hero = styled(Flex)`\r\n  align-items: center;\r\n  background-repeat: no-repeat;\r\n  background-position: top center;\r\n  display: flex;\r\n  justify-content: space-evenly;\r\n  \r\n  margin: auto;\r\n  margin-bottom: 32px;\r\n  padding-top: 116px;\r\n  text-align: center;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    background-position: left center, right center;\r\n    height: 165px;\r\n    padding-top: 0;\r\n  }\r\n`\r\n\r\nconst Cards = styled(BaseLayout)`\r\n  align-items: stretch;\r\n  justify-content: stretch;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 6;\r\n    width: 100%;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 8;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n`\r\n\r\nconst CTACards = styled(BaseLayout)`\r\n  align-items: start;\r\n  margin-bottom: 32px;\r\n\r\n  & > div {\r\n    grid-column: span 4;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.sm} {\r\n    & > div {\r\n      grid-column: span 6;\r\n    }\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    & > div {\r\n      grid-column: span 4;\r\n    }\r\n  }\r\n`\r\n\r\nconst HomePage = styled(Page)`\r\n  width: 100%;\r\n  background-image: url(/images/bg5.svg);\r\n  background-repeat: no-repeat;\r\n  background-position: center center;\r\n`\r\nconst leftImage = '/images/leftImage.png'\r\nconst rightImage = '/images/rightImage.png'\r\n\r\nconst Home: React.FC = () => {\r\n  \r\n  const { t } = useTranslation()\r\n  return (\r\n    <HomePage>\r\n      <Hero>\r\n       <Image src={leftImage} alt='logo' width={250} height={181}  />\r\n        <div>\r\n          <Heading as=\"h1\" scale=\"xl\" mb=\"24px\" color=\"text\">\r\n            {t('PENGU SWAP')}\r\n          </Heading>\r\n          <Text>{t('The #1 AMM and yield farm on Binance Smart Chain.')}</Text>\r\n        </div>\r\n        <Image src={rightImage} alt='logo' width={250} height={181}  />\r\n        \r\n      </Hero>\r\n      <div style={{\"maxWidth\":\"1200px\", \"margin\":\"auto\"}}\r\n\r\n      >\r\n        <Cards>        \r\n         \r\n            <FarmStakingCard />\r\n            <CakeStats />        \r\n          \r\n        </Cards>\r\n        <CTACards>\r\n          <EarnAPRCard />\r\n          <EarnuptoPool />\r\n          <TotalValueLockedCard />\r\n          {/* <WinCard />\r\n          <StakingPairCard /> */}\r\n        </CTACards>\r\n      </div>\r\n    </HomePage>\r\n  )\r\n}\r\n\r\nexport default Home\r\n"],"sourceRoot":""}